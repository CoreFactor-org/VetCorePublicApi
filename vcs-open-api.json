{
  "openapi": "3.0.4",
  "info": {
    "title": "VetCore Web API",
    "description": "VetCore Web API for managing VetCore applications and websites",
    "termsOfService": "https://corefactor.fr/terms",
    "contact": {
      "name": "VetCore support team",
      "url": "https://corefactor.fr/contact"
    },
    "license": {
      "name": "VetCore License",
      "url": "https://corefactor.fr/license"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/api/account/login": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Authenticate user and return JWT",
        "description": "Used to authenticate users and retrieve a JWT token. Can optionally set an HttpOnly cookie.",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtTokenDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": { }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/account/logout": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Log out current user",
        "description": "Clears JWT-related cookies. Mainly useful when authentication relies on HttpOnly cookies.",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/api/account/refresh-token": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Refresh authentication token",
        "description": "Issues a new JWT using a refresh token from the body or cookie.",
        "operationId": "refreshToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtTokenDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/api/account/create-user": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Register and authenticate new user",
        "description": "Creates a new user account and returns an authentication token. CAPTCHA verification required.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtTokenDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/api/account/delete-current-user": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete current authenticated user",
        "operationId": "deleteCurrentUser",
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/account/update-user-info": {
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Update user's name or initials",
        "operationId": "updateCurrentUserInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserInfoDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserInfoDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/account/update-user-color": {
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Update user's color",
        "operationId": "updateCurrentUserColor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserColorDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserColorDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserColorDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/account/update-password": {
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Change user password",
        "operationId": "updateCurrentUserPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserPasswordDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserPasswordDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserPasswordDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/account/update-email": {
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Change user email",
        "operationId": "updateCurrentUserEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserEmailDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserEmailDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserEmailDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/account/all-users": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve all users (admin only)",
        "description": "Restricted to super admins. Returns the full list of users in the system.",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfoDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfoDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfoDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/account/user-info": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get current user's info",
        "operationId": "getCurrentUserInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/ammData/medicinal-products/changeset/{transactionId}": {
      "post": {
        "tags": [
          "AmmData"
        ],
        "summary": "Compute medicinal product changeset",
        "operationId": "computeMedicinalProductChangeset",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetDtoOfstring"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetDtoOfstring"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetDtoOfstring"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/ammData/amm-descriptions/changeset/{transactionId}": {
      "post": {
        "tags": [
          "AmmData"
        ],
        "summary": "Compute AMM descriptions changeset",
        "operationId": "computeDescriptionChangeset",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetDescriptionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetDescriptionDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetDescriptionDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/ammData/medicinal-products/{transactionId}": {
      "post": {
        "tags": [
          "AmmData"
        ],
        "summary": "Upload medicinal products to transaction",
        "description": "Does not reload the cache. Can be called multiple times before commit.",
        "operationId": "uploadMedicinalProducts",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MedicinalProductDtoJson"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MedicinalProductDtoJson"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MedicinalProductDtoJson"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/ammData/medicinal-products": {
      "get": {
        "tags": [
          "AmmData"
        ],
        "summary": "Get paginated medicinal products (slim)",
        "operationId": "getMedicinalProducts",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 2147483647
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MedicinalProductSlimDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MedicinalProductSlimDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MedicinalProductSlimDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/ammData/amm-descriptions/{transactionId}": {
      "post": {
        "tags": [
          "AmmData"
        ],
        "summary": "Upload AMM descriptions to transaction",
        "description": "Does not reload the cache. Can be called multiple times before commit.",
        "operationId": "uploadDescriptions",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DonneesReferenceGroupDtoJson"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DonneesReferenceGroupDtoJson"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DonneesReferenceGroupDtoJson"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/ammData/upload/start": {
      "post": {
        "tags": [
          "AmmData"
        ],
        "summary": "Start AMM upload transaction",
        "description": "Starts or restarts an upload transaction lasting 30 minutes. Returns expiration date.",
        "operationId": "startUpload",
        "parameters": [
          {
            "name": "referenceDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UploadTransactionInfoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadTransactionInfoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadTransactionInfoDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/ammData/upload/rollback/{transactionId}": {
      "post": {
        "tags": [
          "AmmData"
        ],
        "summary": "Rollback AMM upload transaction",
        "operationId": "rollbackUpload",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/ammData/upload/commit/{transactionId}": {
      "post": {
        "tags": [
          "AmmData"
        ],
        "summary": "Commit AMM upload transaction",
        "description": "Marks the transaction as final. Missing data will be considered obsolete and removed.",
        "operationId": "commit",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/ammData/cache/reload": {
      "get": {
        "tags": [
          "AmmData"
        ],
        "summary": "Reload AMM cache from database",
        "operationId": "reloadCache",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/animals/{establishmentId}/animals/{animalUid}": {
      "get": {
        "tags": [
          "Animals"
        ],
        "summary": "Get animal by ID",
        "operationId": "getAnimalById",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "animalUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnimalDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnimalDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnimalDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/animals/{establishmentId}/{animalUid}/weights": {
      "get": {
        "tags": [
          "Animals"
        ],
        "summary": "Get animal weight history",
        "operationId": "getAnimalWeights",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "animalUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnimalWeightDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnimalWeightDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnimalWeightDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/animals/{establishmentId}/customers/{customerUid}": {
      "get": {
        "tags": [
          "Animals"
        ],
        "summary": "Get all animals for a customer",
        "operationId": "getAnimalsByCustomer",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "customerUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnimalDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnimalDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnimalDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/animals/{establishmentId}": {
      "get": {
        "tags": [
          "Animals"
        ],
        "summary": "Get animals by establishment",
        "description": "Returns all animals for an establishment, optionally paginated.",
        "operationId": "getAnimalsByEstablishment",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": null
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnimalDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnimalDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnimalDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Animals"
        ],
        "summary": "Create a new animal",
        "operationId": "createAnimal",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnimalToInsertDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AnimalToInsertDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AnimalToInsertDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnimalDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnimalDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnimalDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/animals/{establishmentId}/{animalUid}": {
      "put": {
        "tags": [
          "Animals"
        ],
        "summary": "Update an existing animal",
        "operationId": "updateAnimal",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "animalUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnimalToUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AnimalToUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AnimalToUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Animals"
        ],
        "summary": "Delete an animal",
        "operationId": "deleteAnimal",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "animalUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/appointments/{establishmentId}/{appointmentId}": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get appointment by ID",
        "operationId": "getAppointmentById",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Appointment"
        ],
        "summary": "Update an appointment",
        "operationId": "updateAppointment",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Appointment"
        ],
        "summary": "Delete an appointment",
        "operationId": "deleteAppointment",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/appointments/{establishmentId}/day": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get appointments for a day",
        "operationId": "getAppointmentsByDay",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/appointments/{establishmentId}/week": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get appointments for a week",
        "description": "the provided day should be the starting day of the week. The 7 next days will be retrieved",
        "operationId": "getAppointmentsByWeek",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/appointments/{establishmentId}/month": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get appointments for a month",
        "description": "the provided day should be the starting day of the month wanted. We will add one month from the required day",
        "operationId": "getAppointmentsByMonth",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/appointments/{establishmentId}": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Create new appointment",
        "operationId": "createAppointment",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/customers/{establishmentId}/{customerUid}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get customer by ID",
        "operationId": "getCustomerById",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "customerUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Customers"
        ],
        "summary": "Update existing customer",
        "operationId": "updateCustomer",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "customerUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Delete customer by ID",
        "operationId": "deleteCustomer",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "customerUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/customers/{establishmentId}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get customers by establishment",
        "description": "Returns all customers for an establishment. Supports optional pagination.",
        "operationId": "getCustomersByEstablishment",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": null
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create new customer",
        "operationId": "createCustomer",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerToInsertDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerToInsertDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerToInsertDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/customers/all": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get all customers (admin only)",
        "description": "Returns a paginated list of all customers. Restricted to super admins.",
        "operationId": "getAllCustomers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/establishments/{establishmentUid}/invoices": {
      "get": {
        "tags": [
          "Establishment"
        ],
        "summary": "Get invoices by Establishment UID",
        "description": "Returns all invoices for the latest subscription of the specified establishment UID. Access restricted to SuperAdmin.",
        "operationId": "getInvoicesByEstablishmentUid",
        "parameters": [
          {
            "name": "establishmentUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionInvoicesDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/establishments/{establishmentId}/reasons": {
      "get": {
        "tags": [
          "Establishment"
        ],
        "summary": "Get appointment reasons for establishment",
        "description": "Each establishment could have its own set of appointment's reasons",
        "operationId": "getAppointmentReasons",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentReasonDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": { }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/establishments": {
      "get": {
        "tags": [
          "Establishment"
        ],
        "summary": "Get all establishments (admin only)",
        "description": "Returns all establishments in the system. Only accessible by super admins.",
        "operationId": "getAllEstablishments",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EstablishmentDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EstablishmentDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EstablishmentDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Establishment"
        ],
        "summary": "Validate subscription and create new establishment",
        "description": "Verifies amount, finalizes the setup intent, and creates a new establishment for the user.",
        "operationId": "subscribeNewEstablishment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscribeEstablishmentDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscribeEstablishmentDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubscribeEstablishmentDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/establishments/me": {
      "get": {
        "tags": [
          "Establishment"
        ],
        "summary": "Get current user's establishments",
        "description": "Returns establishments linked to the current authenticated user, including preferred ones.",
        "operationId": "getMyEstablishments",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EstablishmentsByUserResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstablishmentsByUserResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstablishmentsByUserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/establishments/{establishmentId}/user-role": {
      "patch": {
        "tags": [
          "Establishment"
        ],
        "summary": "Update user role in establishment",
        "operationId": "updateUserRole",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRoleDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRoleDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRoleDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/establishments/join": {
      "post": {
        "tags": [
          "Establishment"
        ],
        "summary": "Join establishment with code",
        "description": "Assigns current user to an establishment using a valid assignment code.",
        "operationId": "joinEstablishment",
        "parameters": [
          {
            "name": "assignmentCode",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SelectedEstablishmentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectedEstablishmentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectedEstablishmentDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/establishments/{establishmentId}/users/{userId}": {
      "delete": {
        "tags": [
          "Establishment"
        ],
        "summary": "Remove user from establishment",
        "operationId": "removeUserFromEstablishment",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/establishments/{establishmentId}": {
      "get": {
        "tags": [
          "Establishment"
        ],
        "summary": "Get establishment details",
        "operationId": "getEstablishmentInfo",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EstablishmentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstablishmentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstablishmentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Establishment"
        ],
        "summary": "Update establishment name or location(s)",
        "description": "Allows changing the name or location(s) of the establishment.",
        "operationId": "updateEstablishment",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchEstablishmentDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchEstablishmentDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PatchEstablishmentDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/api/establishments/{establishmentId}/collaborator-code": {
      "post": {
        "tags": [
          "Establishment"
        ],
        "summary": "Generate collaborator invitation code",
        "description": "Creates a one-time code to invite a user to the establishment with a given role.",
        "operationId": "generateCollaboratorCode",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCollaboratorDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCollaboratorDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddCollaboratorDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/api/establishments/{establishmentId}/licences": {
      "get": {
        "tags": [
          "Establishment"
        ],
        "summary": "Get licences for an establishment",
        "operationId": "getEstablishmentLicences",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EstablishmentLicenceInformationDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstablishmentLicenceInformationDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstablishmentLicenceInformationDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/establishments/{establishmentId}/users": {
      "get": {
        "tags": [
          "Establishment"
        ],
        "summary": "Get users of an establishment",
        "operationId": "getUsersByEstablishment",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EstablishmentUserDetailsDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EstablishmentUserDetailsDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EstablishmentUserDetailsDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/establishments/{establishmentId}/request-deletion": {
      "post": {
        "tags": [
          "Establishment"
        ],
        "summary": "Request establishment deletion",
        "description": "Sends a deletion request for an establishment. Action is deferred and reviewed.",
        "operationId": "requestEstablishmentDeletion",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/api/establishments/{establishmentId}/subscription/{subscriptionId}": {
      "patch": {
        "tags": [
          "Establishment"
        ],
        "summary": "Update subscription",
        "description": "Updates subscription plan and options. Accessible to managers only.",
        "operationId": "updateSubscription",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/files": {
      "get": {
        "tags": [
          "File"
        ],
        "operationId": "getFile",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "File"
        ],
        "operationId": "createFile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FileDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/files/{key}": {
      "get": {
        "tags": [
          "File"
        ],
        "operationId": "getFileByKey",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/invoices/{invoiceId}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Get invoice by ID",
        "description": "Returns a single invoice using its unique identifier. Access restricted to SuperAdmin.",
        "operationId": "getInvoiceById",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionInvoiceDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/api/payments/create-setup-intents": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Create Stripe setup intent",
        "description": "Initializes a SetupIntent on Stripe to collect and attach a payment method.",
        "operationId": "createSetupIntent",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SetupIntentResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetupIntentResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetupIntentResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/payments/stripe/webhook": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Stripe webhook listener",
        "description": "Handles Stripe event notifications. Must be configured in the Stripe dashboard.",
        "operationId": "stripeWebhook",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/pricing/rates": {
      "get": {
        "tags": [
          "Pricing"
        ],
        "summary": "Get all subscription rates",
        "description": "Returns the current pricing configuration for all subscription plans and options.",
        "operationId": "getRates",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatesDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/api/server/ping": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Ping public endpoint",
        "operationId": "ping",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/server/healthz": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Health check",
        "description": "Used for infrastructure-level readiness/liveness probes.",
        "operationId": "healthz",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/server/ping-authenticated": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Ping as authenticated user",
        "operationId": "pingAuthenticated",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/server/ping-admin": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Ping as super admin",
        "operationId": "pingAdmin",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/server/api-proxy-url/{establishmentId}": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get API proxy URL",
        "description": "Returns the API proxy base URL. Used for local/offline support.",
        "operationId": "getApiProxyUrl",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/server/ping-authenticated/{establishmentId}": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Ping for a specific establishment as authenticated user",
        "operationId": "pingEstablishment",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/server/version": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get backend version",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/server/backend-api-token": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get backend API token",
        "description": "Returns a JWT token identifying the backend to Keycloak. Super admin only.",
        "operationId": "getBackendApiToken",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenApiClientCredentialDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": { }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/server/validate-jwt-token": {
      "post": {
        "tags": [
          "Server"
        ],
        "summary": "Validate JWT token",
        "description": "Checks validity of a JWT token and returns diagnostic details.",
        "operationId": "validateJwtToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtValidationResultDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/server/time/utc": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get current server UTC time",
        "operationId": "getUtcTime",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/server/time/advance": {
      "post": {
        "tags": [
          "Server"
        ],
        "summary": "Advance simulated time",
        "description": "Advances the simulated time by a given number of days. Requires FakeTimeProvider and SuperAdmin.",
        "operationId": "advanceFakeTime",
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/server/time/set": {
      "post": {
        "tags": [
          "Server"
        ],
        "summary": "Set simulated time",
        "description": "Sets the simulated time to an explicit UTC value. Requires FakeTimeProvider and SuperAdmin.",
        "operationId": "setFakeTime",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            },
            "text/json": {
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/signalr/send-establishment/{establishmentId}": {
      "post": {
        "tags": [
          "SignalR"
        ],
        "summary": "Send message to one establishment",
        "description": "Sends a SignalR message to all users of the specified establishment. Caller must belong to it.",
        "operationId": "sendToEstablishment",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEstablishmentSignalRMessageDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEstablishmentSignalRMessageDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendEstablishmentSignalRMessageDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/signalr/send-any-establishment": {
      "post": {
        "tags": [
          "SignalR"
        ],
        "summary": "Send message to any establishment",
        "description": "Allows super admin to send a SignalR message to any establishment.",
        "operationId": "sendToAnyEstablishment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendAnyEstablishmentSignalRMessageDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendAnyEstablishmentSignalRMessageDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendAnyEstablishmentSignalRMessageDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/signalr/send-user": {
      "post": {
        "tags": [
          "SignalR"
        ],
        "summary": "Send message to user",
        "description": "Sends a SignalR message to a specific user. Super admin only.",
        "operationId": "sendToUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendUserSignalRMessageDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendUserSignalRMessageDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendUserSignalRMessageDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/signalr/ping-all-users": {
      "post": {
        "tags": [
          "SignalR"
        ],
        "summary": "Ping all users",
        "description": "Broadcasts a server ping message to all connected users.",
        "operationId": "pingAllUsers",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/signalr/ping-all-establishments": {
      "post": {
        "tags": [
          "SignalR"
        ],
        "summary": "Ping all establishments",
        "description": "Broadcasts a ping message to all establishments’ users. Super admin only.",
        "operationId": "pingAllEstablishments",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/subscriptions/{subscriptionUid}/invoices": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get invoices by Subscription UID",
        "description": "Returns all invoices related to the given subscription UID. Access restricted to SuperAdmin.",
        "operationId": "getInvoicesBySubscriptionUid",
        "parameters": [
          {
            "name": "subscriptionUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionInvoicesDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddCollaboratorDto": {
        "required": [
          "addAsManager",
          "requestedRole"
        ],
        "type": "object",
        "properties": {
          "addAsManager": {
            "type": "boolean"
          },
          "requestedRole": {
            "$ref": "#/components/schemas/NullableOfVcsRole"
          }
        }
      },
      "AllowedCountryCode": {
        "enum": [
          "fra",
          "gbr"
        ],
        "type": "string"
      },
      "AnimalDto": {
        "required": [
          "animalUid",
          "denomination",
          "kind",
          "customerUid",
          "establishmentUid",
          "registrationDate",
          "search"
        ],
        "type": "object",
        "properties": {
          "animalUid": {
            "type": "string",
            "format": "uuid"
          },
          "denomination": {
            "maxLength": 100,
            "type": "string"
          },
          "kind": {
            "$ref": "#/components/schemas/AnimalKind"
          },
          "alert": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "customerUid": {
            "type": "string",
            "format": "uuid"
          },
          "establishmentUid": {
            "type": "string",
            "format": "uuid"
          },
          "registrationDate": {
            "type": "string",
            "format": "date-time"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deathDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exitDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sterilizationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sex": {
            "$ref": "#/components/schemas/NullableOfSex"
          },
          "color": {
            "maxLength": 40,
            "type": "string",
            "nullable": true
          },
          "breed": {
            "maxLength": 60,
            "type": "string",
            "nullable": true
          },
          "identifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnimalIdentificationDto"
            }
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "search": {
            "maxLength": 300,
            "type": "string",
            "nullable": true
          }
        }
      },
      "AnimalIdentificationDto": {
        "required": [
          "identificationType",
          "identificationCode"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "identificationType": {
            "$ref": "#/components/schemas/IdentificationType"
          },
          "identificationCode": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "AnimalIdentificationToInsertDto": {
        "required": [
          "identificationType",
          "identificationCode"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "identificationType": {
            "$ref": "#/components/schemas/IdentificationType"
          },
          "identificationCode": {
            "type": "string"
          }
        }
      },
      "AnimalKind": {
        "enum": [
          "other",
          "dog",
          "cat",
          "rabbit",
          "rodent",
          "ferret",
          "bird",
          "reptile",
          "horse",
          "bovine",
          "ovine",
          "caprine",
          "porcine",
          "poultry",
          "camelid",
          "exotic"
        ],
        "type": "string"
      },
      "AnimalToInsertDto": {
        "required": [
          "customerId",
          "kind",
          "denomination"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "kind": {
            "$ref": "#/components/schemas/AnimalKind"
          },
          "denomination": {
            "maxLength": 100,
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deathDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "breed": {
            "maxLength": 60,
            "type": "string",
            "nullable": true
          },
          "sterilizationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sex": {
            "$ref": "#/components/schemas/NullableOfSex"
          },
          "color": {
            "maxLength": 40,
            "type": "string",
            "nullable": true
          },
          "comments": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "alert": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "exitDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "identifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnimalIdentificationToInsertDto"
            },
            "nullable": true
          },
          "weights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnimalWeightToInsertDto"
            },
            "nullable": true
          }
        }
      },
      "AnimalToUpdateDto": {
        "type": "object",
        "properties": {
          "denomination": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deathDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "breed": {
            "maxLength": 60,
            "type": "string",
            "nullable": true
          },
          "sterilizationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sex": {
            "$ref": "#/components/schemas/NullableOfSex"
          },
          "color": {
            "maxLength": 40,
            "type": "string",
            "nullable": true
          },
          "alert": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "comments": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "exitDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "AnimalWeightDto": {
        "required": [
          "dateRecorded",
          "weightInGrams"
        ],
        "type": "object",
        "properties": {
          "dateRecorded": {
            "type": "string",
            "format": "date-time"
          },
          "weightInGrams": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AnimalWeightToInsertDto": {
        "required": [
          "date",
          "grams"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "grams": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AppointmentCreateDto": {
        "required": [
          "startDate",
          "durationInMinutes",
          "noSpecificHour"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "durationInMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "sendToWaitingRoom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "started": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "suspended": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "readyInvoice": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "invoiceDone": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cancelledTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "customerUid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "customerAddressUid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "assignedStaffsUids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "animalsUids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "noSpecificHour": {
            "type": "boolean"
          },
          "recurrenceGroupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "notes": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "emergency": {
            "type": "boolean"
          },
          "reasonUid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "AppointmentDto": {
        "required": [
          "id",
          "startTime",
          "noSpecificHour",
          "durationInMinutes",
          "relatedEstablishmentId",
          "createdBy",
          "createdAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "customerUid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "customerAddressUid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "assignedStaffUids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "animalsUids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "noSpecificHour": {
            "type": "boolean"
          },
          "durationInMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "relatedEstablishmentId": {
            "type": "string",
            "format": "uuid"
          },
          "recurrenceGroupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "createdBy": {
            "maxLength": 161,
            "type": "string"
          },
          "lastUpdateBy": {
            "maxLength": 161,
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "sendToWaitingRoom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "started": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "suspended": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "readyInvoice": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "invoiceDone": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cancelledTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "notes": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "emergency": {
            "type": "boolean"
          },
          "reasonUid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "AppointmentReasonDto": {
        "required": [
          "uid",
          "establishmentId",
          "colorHexaDecimal",
          "isCustomReason",
          "name"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid"
          },
          "establishmentId": {
            "type": "string",
            "format": "uuid"
          },
          "colorHexaDecimal": {
            "maxLength": 7,
            "minLength": 7,
            "type": "string"
          },
          "isCustomReason": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 80,
            "type": "string"
          }
        }
      },
      "AppointmentUpdateDto": {
        "type": "object",
        "properties": {
          "customerUid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "customerAddressUid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "sendToWaitingRoom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "started": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "readyInvoice": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "invoiceDone": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "staffUids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "animalsUids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "suspended": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cancelledTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "durationInMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "noSpecificHour": {
            "type": "boolean",
            "nullable": true
          },
          "recurrenceGroupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "emergency": {
            "type": "boolean",
            "nullable": true
          },
          "reasonUid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "notes": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChangesetDescriptionDto": {
        "required": [
          "term_nat",
          "term_tit",
          "term_typ_proc",
          "term_stat_auto",
          "term_fp",
          "term_esp",
          "term_sa",
          "term_va",
          "term_cd",
          "term_denr",
          "term_pres",
          "term_unite",
          "term_titre"
        ],
        "type": "object",
        "properties": {
          "term_nat": {
            "$ref": "#/components/schemas/ChangesetDtoOfint"
          },
          "term_tit": {
            "$ref": "#/components/schemas/ChangesetDtoOfint"
          },
          "term_typ_proc": {
            "$ref": "#/components/schemas/ChangesetDtoOfint"
          },
          "term_stat_auto": {
            "$ref": "#/components/schemas/ChangesetDtoOfint"
          },
          "term_fp": {
            "$ref": "#/components/schemas/ChangesetDtoOfint"
          },
          "term_esp": {
            "$ref": "#/components/schemas/ChangesetDtoOfint"
          },
          "term_sa": {
            "$ref": "#/components/schemas/ChangesetDtoOfint"
          },
          "term_va": {
            "$ref": "#/components/schemas/ChangesetDtoOfint"
          },
          "term_cd": {
            "$ref": "#/components/schemas/ChangesetDtoOfint"
          },
          "term_denr": {
            "$ref": "#/components/schemas/ChangesetDtoOfint"
          },
          "term_pres": {
            "$ref": "#/components/schemas/ChangesetDtoOfint"
          },
          "term_unite": {
            "$ref": "#/components/schemas/ChangesetDtoOfint"
          },
          "term_titre": {
            "$ref": "#/components/schemas/ChangesetDtoOfint"
          }
        }
      },
      "ChangesetDtoOfint": {
        "required": [
          "entity_type",
          "dto_type",
          "added",
          "updated",
          "removed"
        ],
        "type": "object",
        "properties": {
          "entity_type": {
            "type": "string"
          },
          "dto_type": {
            "type": "string"
          },
          "added": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "updated": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "removed": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "ChangesetDtoOfstring": {
        "required": [
          "entity_type",
          "dto_type",
          "added",
          "updated",
          "removed"
        ],
        "type": "object",
        "properties": {
          "entity_type": {
            "type": "string"
          },
          "dto_type": {
            "type": "string"
          },
          "added": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "updated": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "removed": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChangeUserEmailDto": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "ChangeUserPasswordDto": {
        "required": [
          "oldPassword",
          "newPassword"
        ],
        "type": "object",
        "properties": {
          "oldPassword": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "newPassword": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "ClaimsResultDto": {
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "CompositionDtoJson": {
        "required": [
          "sa"
        ],
        "type": "object",
        "properties": {
          "sa": {
            "$ref": "#/components/schemas/SaDtoJson"
          },
          "fraction": {
            "$ref": "#/components/schemas/FractionDtoJson"
          }
        }
      },
      "ContactKind": {
        "enum": [
          "other",
          "phone",
          "email",
          "fax"
        ],
        "type": "string"
      },
      "CreateUserDto": {
        "required": [
          "email",
          "password",
          "firstName",
          "lastName",
          "withHttpOnlyCookie"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "firstName": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "lastName": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "withHttpOnlyCookie": {
            "type": "boolean"
          },
          "reCaptchaToken": {
            "maxLength": 4000,
            "type": "string",
            "nullable": true
          },
          "veterinarianOrderNumber": {
            "maxLength": 32,
            "type": "string",
            "nullable": true
          }
        }
      },
      "CustomerAddressDto": {
        "required": [
          "uid",
          "address",
          "zipCode",
          "city"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "address": {
            "maxLength": 300,
            "type": "string"
          },
          "zipCode": {
            "maxLength": 20,
            "type": "string"
          },
          "city": {
            "maxLength": 100,
            "type": "string"
          },
          "note": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "gps": {
            "$ref": "#/components/schemas/GpsCoordinateDto"
          },
          "isInvoice": {
            "type": "boolean"
          }
        }
      },
      "CustomerAddressToInsertDto": {
        "required": [
          "address",
          "zipCode",
          "city"
        ],
        "type": "object",
        "properties": {
          "label": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "address": {
            "maxLength": 300,
            "minLength": 1,
            "type": "string"
          },
          "zipCode": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string"
          },
          "city": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "note": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "gps": {
            "$ref": "#/components/schemas/GpsCoordinateDto"
          },
          "isInvoice": {
            "type": "boolean"
          }
        }
      },
      "CustomerContactDto": {
        "required": [
          "uid",
          "kind",
          "value"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid"
          },
          "kind": {
            "$ref": "#/components/schemas/ContactKind"
          },
          "value": {
            "maxLength": 100,
            "type": "string"
          }
        }
      },
      "CustomerContactToInsertDto": {
        "required": [
          "kind",
          "value"
        ],
        "type": "object",
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/ContactKind"
          },
          "value": {
            "maxLength": 100,
            "type": "string"
          },
          "preferred": {
            "type": "boolean"
          },
          "note": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          }
        }
      },
      "CustomerDenominationDto": {
        "required": [
          "uid",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "maxLength": 80,
            "type": "string"
          },
          "lastName": {
            "maxLength": 80,
            "type": "string"
          },
          "role": {
            "maxLength": 80,
            "type": "string",
            "nullable": true
          }
        }
      },
      "CustomerDenominationToInsertDto": {
        "required": [
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "lastName": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "role": {
            "maxLength": 80,
            "type": "string",
            "nullable": true
          }
        }
      },
      "CustomerDto": {
        "required": [
          "uid",
          "establishmentUid",
          "countryCode",
          "customerNumber",
          "alert",
          "note",
          "search",
          "professionalInfo",
          "persons",
          "contacts",
          "addresses"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid"
          },
          "establishmentUid": {
            "type": "string",
            "format": "uuid"
          },
          "countryCode": {
            "$ref": "#/components/schemas/AllowedCountryCode"
          },
          "customerNumber": {
            "type": "integer",
            "format": "int32"
          },
          "alert": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "note": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "search": {
            "maxLength": 300,
            "type": "string",
            "nullable": true
          },
          "professionalInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfessionalInfoDto"
            }
          },
          "persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerDenominationDto"
            }
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerContactDto"
            }
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAddressDto"
            }
          }
        }
      },
      "CustomerToInsertDto": {
        "required": [
          "countryCode",
          "isProfessional",
          "persons",
          "addresses"
        ],
        "type": "object",
        "properties": {
          "countryCode": {
            "$ref": "#/components/schemas/AllowedCountryCode"
          },
          "isProfessional": {
            "type": "boolean"
          },
          "alert": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "note": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerDenominationToInsertDto"
            }
          },
          "contactsInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerContactToInsertDto"
            },
            "nullable": true
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAddressToInsertDto"
            }
          },
          "professionalInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfessionalInfoToInsertDto"
            },
            "nullable": true
          }
        }
      },
      "CustomerUpdateDto": {
        "type": "object",
        "properties": {
          "note": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "alert": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "addedProInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfessionalInfoToInsertDto"
            },
            "nullable": true
          },
          "updatedProInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfessionalInfoDto"
            },
            "nullable": true
          },
          "deletedProInfosUid": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "addedOrUpdatedPersons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerDenominationToInsertDto"
            },
            "nullable": true
          },
          "updatedPersons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerDenominationDto"
            },
            "nullable": true
          },
          "deletedPersonsUid": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "addedContactsInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerContactToInsertDto"
            },
            "nullable": true
          },
          "updatedContactsInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerContactDto"
            },
            "nullable": true
          },
          "deletedContactsInfoUid": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "addedAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAddressToInsertDto"
            },
            "nullable": true
          },
          "updatedAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAddressDto"
            },
            "nullable": true
          },
          "deletedAddressesUid": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        }
      },
      "DonneesReferenceGroupDtoJson": {
        "type": "object",
        "properties": {
          "termNat": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermNatDtoJson"
            },
            "nullable": true
          },
          "termTit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermTitDtoJson"
            },
            "nullable": true
          },
          "termTypProc": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermTypProcDtoJson"
            },
            "nullable": true
          },
          "termStatAuto": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermStatAutoDtoJson"
            },
            "nullable": true
          },
          "termFp": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermFpDtoJson"
            },
            "nullable": true
          },
          "termEsp": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermEspDtoJson"
            },
            "nullable": true
          },
          "termSa": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermSaDtoJson"
            },
            "nullable": true
          },
          "termVa": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermVaDtoJson"
            },
            "nullable": true
          },
          "termCd": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermCdDtoJson"
            },
            "nullable": true
          },
          "termDenr": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermDenrDtoJson"
            },
            "nullable": true
          },
          "termPres": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermPresDtoJson"
            },
            "nullable": true
          },
          "termUnite": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermUniteDtoJson"
            },
            "nullable": true
          },
          "termTitre": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermTitreDtoJson"
            },
            "nullable": true
          }
        }
      },
      "EstablishmentDto": {
        "required": [
          "name",
          "uid",
          "users",
          "locations",
          "activeSubscription",
          "subscriptions",
          "licences"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 200,
            "type": "string"
          },
          "uid": {
            "type": "string",
            "format": "uuid"
          },
          "deletionRequested": {
            "type": "boolean"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstablishmentUserDto"
            }
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstablishmentLocationDto"
            }
          },
          "activeSubscription": {
            "type": "boolean"
          },
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionDto"
            }
          },
          "licences": {
            "$ref": "#/components/schemas/EstablishmentLicenceInformationDto"
          }
        }
      },
      "EstablishmentLicenceInformationDto": {
        "required": [
          "veterinariesLicences",
          "assistantsLicences",
          "accountantsLicences",
          "externalServicesLicences",
          "remainingVeterinariesLicences",
          "remainingAssistantsLicences",
          "remainingAccountantsLicences",
          "remainingExternalServicesLicences"
        ],
        "type": "object",
        "properties": {
          "veterinariesLicences": {
            "type": "integer",
            "format": "int32"
          },
          "assistantsLicences": {
            "type": "integer",
            "format": "int32"
          },
          "accountantsLicences": {
            "type": "integer",
            "format": "int32"
          },
          "externalServicesLicences": {
            "type": "integer",
            "format": "int32"
          },
          "remainingVeterinariesLicences": {
            "type": "integer",
            "format": "int32"
          },
          "remainingAssistantsLicences": {
            "type": "integer",
            "format": "int32"
          },
          "remainingAccountantsLicences": {
            "type": "integer",
            "format": "int32"
          },
          "remainingExternalServicesLicences": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EstablishmentLocationDto": {
        "required": [
          "uid",
          "name",
          "address",
          "city",
          "zipCode",
          "country"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "maxLength": 200,
            "type": "string"
          },
          "address": {
            "maxLength": 300,
            "type": "string"
          },
          "city": {
            "maxLength": 100,
            "type": "string"
          },
          "zipCode": {
            "maxLength": 20,
            "type": "string"
          },
          "region": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "type": "string"
          },
          "phoneNumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          }
        }
      },
      "EstablishmentsByUserResponseDto": {
        "required": [
          "establishments"
        ],
        "type": "object",
        "properties": {
          "preferredEstablishmentUid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "preferredLocationUid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "establishments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstablishmentDto"
            }
          }
        }
      },
      "EstablishmentUserDetailsDto": {
        "required": [
          "uid",
          "isManager",
          "firstName",
          "lastName",
          "initials",
          "email",
          "color"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid"
          },
          "role": {
            "$ref": "#/components/schemas/NullableOfVcsRole"
          },
          "isManager": {
            "type": "boolean"
          },
          "firstName": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "lastName": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "initials": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "color": {
            "maxLength": 7,
            "minLength": 7,
            "type": "string"
          }
        }
      },
      "EstablishmentUserDto": {
        "required": [
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid"
          },
          "role": {
            "$ref": "#/components/schemas/NullableOfVcsRole"
          },
          "isManager": {
            "type": "boolean"
          }
        }
      },
      "ExcipientQspDtoJson": {
        "required": [
          "qteQsp"
        ],
        "type": "object",
        "properties": {
          "qteQsp": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "termPres": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "termUnite": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "nullable": true
      },
      "FileDto": {
        "required": [
          "fileFullName",
          "fileKey"
        ],
        "type": "object",
        "properties": {
          "fileFullName": {
            "maxLength": 400,
            "minLength": 1,
            "type": "string"
          },
          "fileKey": {
            "maxLength": 150,
            "minLength": 1,
            "type": "string"
          }
        },
        "nullable": true
      },
      "FractionDtoJson": {
        "required": [
          "termSa",
          "quantite",
          "termUnite"
        ],
        "type": "object",
        "properties": {
          "termSa": {
            "type": "integer",
            "format": "int32"
          },
          "quantite": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "termUnite": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        },
        "nullable": true
      },
      "GpsCoordinateDto": {
        "required": [
          "lat",
          "lon"
        ],
        "type": "object",
        "properties": {
          "lat": {
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "format": "double"
          },
          "lon": {
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "format": "double"
          }
        },
        "nullable": true
      },
      "IdentificationType": {
        "enum": [
          "microchip",
          "tattoo",
          "earTag",
          "ring",
          "passport",
          "dna",
          "other"
        ],
        "type": "string"
      },
      "JwtTokenDto": {
        "required": [
          "access_token",
          "expires_in",
          "userUid",
          "refresh_expires_in",
          "refresh_token"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "minLength": 1,
            "type": "string"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32"
          },
          "userUid": {
            "type": "string",
            "format": "uuid"
          },
          "refresh_expires_in": {
            "type": "integer",
            "format": "int32"
          },
          "refresh_token": {
            "minLength": 1,
            "type": "string"
          },
          "token_type": {
            "type": "string",
            "nullable": true
          },
          "not_before_policy": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "session_state": {
            "type": "string",
            "nullable": true
          },
          "scope": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "JwtValidationResultDto": {
        "required": [
          "valid",
          "messages"
        ],
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issuer": {
            "type": "string"
          },
          "audience": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "claims": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimsResultDto"
            }
          }
        }
      },
      "LoginDto": {
        "required": [
          "email",
          "password",
          "withHttpOnlyCookie"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "withHttpOnlyCookie": {
            "type": "boolean"
          }
        }
      },
      "MdvCodesGtinDtoJson": {
        "required": [
          "libMod"
        ],
        "type": "object",
        "properties": {
          "libMod": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "packId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "codeGtin": {
            "maxLength": 14,
            "pattern": "^\\d{8,14}$",
            "type": "string",
            "nullable": true
          },
          "numAmm": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "MedicinalProductDtoJson": {
        "required": [
          "srcId",
          "nom",
          "num",
          "termTit",
          "termNat",
          "termTypProc",
          "termStatAuto",
          "dateAmm",
          "termFp"
        ],
        "type": "object",
        "properties": {
          "srcId": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "nom": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "num": {
            "maxLength": 7,
            "pattern": "^\\d{7}$",
            "type": "string",
            "nullable": true
          },
          "termTit": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "termNat": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "termTypProc": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "termStatAuto": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "dateAmm": {
            "type": "string",
            "format": "date-time"
          },
          "termFp": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "numAmm": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "permId": {
            "maxLength": 12,
            "pattern": "^\\d{12}$",
            "type": "string",
            "nullable": true
          },
          "prodId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "majRcp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lienRcp": {
            "maxLength": 300,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "compositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompositionDtoJson"
            },
            "nullable": true
          },
          "voiesAdmin": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoieAdministrationDtoJson"
            },
            "nullable": true
          },
          "modeleDestineVente": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModeleDestineVenteDtoJson"
            },
            "nullable": true
          },
          "mdvCodesGtin": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MdvCodesGtinDtoJson"
            },
            "nullable": true
          },
          "excipientQsp": {
            "$ref": "#/components/schemas/ExcipientQspDtoJson"
          },
          "atcvetCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "paragraphesRcp": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParaRcpDtoJson"
            },
            "nullable": true
          }
        }
      },
      "MedicinalProductSlimDto": {
        "required": [
          "nom",
          "num",
          "termTitDesc",
          "termNatDesc",
          "termTypProcDesc",
          "termStatAutoDesc",
          "dateAmm",
          "termFpDesc"
        ],
        "type": "object",
        "properties": {
          "nom": {
            "maxLength": 255,
            "type": "string"
          },
          "num": {
            "maxLength": 7,
            "type": "string"
          },
          "termTitDesc": {
            "maxLength": 255,
            "type": "string"
          },
          "termNatDesc": {
            "maxLength": 255,
            "type": "string"
          },
          "termTypProcDesc": {
            "maxLength": 255,
            "type": "string"
          },
          "termStatAutoDesc": {
            "maxLength": 255,
            "type": "string"
          },
          "dateAmm": {
            "type": "string",
            "format": "date-time"
          },
          "termFpDesc": {
            "maxLength": 255,
            "type": "string"
          },
          "numAmm": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "permId": {
            "maxLength": 12,
            "type": "string",
            "nullable": true
          },
          "prodId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "majRcp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lienRcp": {
            "maxLength": 300,
            "type": "string",
            "nullable": true
          }
        }
      },
      "ModeleDestineVenteDtoJson": {
        "required": [
          "libMod"
        ],
        "type": "object",
        "properties": {
          "libMod": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "nbUnit": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "termPres": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "termCd": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "libCondp": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          }
        }
      },
      "NewEstablishmentLocationDto": {
        "required": [
          "name",
          "address",
          "city",
          "zipCode",
          "country"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "address": {
            "maxLength": 300,
            "type": "string"
          },
          "city": {
            "maxLength": 100,
            "type": "string"
          },
          "zipCode": {
            "maxLength": 20,
            "type": "string"
          },
          "region": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "type": "string"
          },
          "phoneNumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          }
        }
      },
      "NullableOfSex": {
        "enum": [
          "male",
          "female",
          null
        ],
        "nullable": true
      },
      "NullableOfVcsRole": {
        "enum": [
          "assistant",
          "veterinary",
          "accountant",
          "externalSoftware",
          null
        ],
        "nullable": true
      },
      "OptionPriceDto": {
        "required": [
          "option",
          "priceInCents"
        ],
        "type": "object",
        "properties": {
          "option": {
            "$ref": "#/components/schemas/SubscriptionOption"
          },
          "priceInCents": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ParaRcpDtoJson": {
        "required": [
          "termTitre"
        ],
        "type": "object",
        "properties": {
          "termTitre": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "contenu": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PatchEstablishmentDto": {
        "type": "object",
        "properties": {
          "establishmentName": {
            "type": "string",
            "nullable": true
          },
          "newLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewEstablishmentLocationDto"
            },
            "nullable": true
          },
          "updatedLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstablishmentLocationDto"
            },
            "nullable": true
          },
          "deletedLocationsUid": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ProfessionalInfoDto": {
        "required": [
          "uid",
          "kind",
          "value"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid"
          },
          "kind": {
            "$ref": "#/components/schemas/ProfessionalInformationKind"
          },
          "value": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "ProfessionalInformationKind": {
        "enum": [
          "other",
          "etsName",
          "vatNumber",
          "legalForm",
          "siret",
          "siren",
          "ede",
          "sire",
          "eori",
          "companyNumberGbr"
        ],
        "type": "string"
      },
      "ProfessionalInfoToInsertDto": {
        "required": [
          "kind",
          "value"
        ],
        "type": "object",
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/ProfessionalInformationKind"
          },
          "value": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "RatesDetailsDto": {
        "required": [
          "rates",
          "optionsPrices"
        ],
        "type": "object",
        "properties": {
          "rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionOfferDto"
            }
          },
          "optionsPrices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptionPriceDto"
            }
          }
        }
      },
      "RefreshDto": {
        "required": [
          "withHttpOnlyCookie"
        ],
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "withHttpOnlyCookie": {
            "type": "boolean"
          }
        }
      },
      "SaDtoJson": {
        "required": [
          "termSa"
        ],
        "type": "object",
        "properties": {
          "termSa": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "quantite": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "termUnite": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "nullable": true
      },
      "SelectedEstablishmentDto": {
        "required": [
          "establishmentUid"
        ],
        "type": "object",
        "properties": {
          "establishmentUid": {
            "type": "string",
            "format": "uuid"
          },
          "locationUid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "SendAnyEstablishmentSignalRMessageDto": {
        "required": [
          "establishmentId",
          "key"
        ],
        "type": "object",
        "properties": {
          "establishmentId": {
            "type": "string",
            "format": "uuid"
          },
          "key": {
            "$ref": "#/components/schemas/SignalRKey"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SendEstablishmentSignalRMessageDto": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/SignalREstablishmentMessage"
          }
        }
      },
      "SendUserSignalRMessageDto": {
        "required": [
          "userId",
          "message"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "message": {
            "$ref": "#/components/schemas/SignalRMessage"
          }
        }
      },
      "SetupIntentResponseDto": {
        "required": [
          "setupIntentId",
          "clientSecret",
          "status"
        ],
        "type": "object",
        "properties": {
          "setupIntentId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "SignalREstablishmentMessage": {
        "required": [
          "key",
          "establishmentUid"
        ],
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/SignalRKey"
          },
          "establishmentUid": {
            "type": "string",
            "format": "uuid"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SignalRKey": {
        "enum": [
          "ping",
          "establishmentUsersChanged",
          "assignToNewEstablishment",
          "userInfoUpdated",
          "userInfoEmailOrPasswordUpdated",
          "appointmentChanged",
          "animalAddedOrUpdated",
          "animalDeleted",
          "customerAddedOrUpdated",
          "customerDeleted",
          "establishmentDeletionRequested",
          "establishmentUpdated"
        ],
        "type": "string"
      },
      "SignalRMessage": {
        "required": [
          "key",
          "userUid"
        ],
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/SignalRKey"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "userUid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "StripeInfoDto": {
        "required": [
          "paymentMethodUid",
          "setupIntentId"
        ],
        "type": "object",
        "properties": {
          "testClockId": {
            "type": "string",
            "nullable": true
          },
          "paymentMethodUid": {
            "minLength": 1,
            "type": "string"
          },
          "setupIntentId": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "SubscribeEstablishmentDto": {
        "required": [
          "etsName",
          "amount",
          "plan",
          "commitment",
          "totalLicencesVet",
          "totalLicencesAsv",
          "totalLicencesAccountant",
          "totalLicencesExternalSoftwares",
          "stripeInfo"
        ],
        "type": "object",
        "properties": {
          "etsName": {
            "minLength": 1,
            "type": "string"
          },
          "amount": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "plan": {
            "$ref": "#/components/schemas/SubscriptionPlan"
          },
          "commitment": {
            "$ref": "#/components/schemas/SubscriptionCommitment"
          },
          "chosenOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionOption"
            }
          },
          "totalLicencesVet": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "totalLicencesAsv": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "totalLicencesAccountant": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "totalLicencesExternalSoftwares": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stripeInfo": {
            "$ref": "#/components/schemas/StripeInfoDto"
          }
        }
      },
      "SubscriptionCommitment": {
        "enum": [
          "monthly",
          "annually"
        ],
        "type": "string"
      },
      "SubscriptionDto": {
        "required": [
          "uid",
          "establishmentUid",
          "plan",
          "commitment",
          "amountInCents",
          "subscriptionValidFrom",
          "nextChargeDate",
          "createdAtUtc",
          "licVeterinaries",
          "licAssistants",
          "licAccountants",
          "licExternalServices",
          "includedOptions",
          "status"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid"
          },
          "establishmentUid": {
            "type": "string",
            "format": "uuid"
          },
          "previousSubscriptionUid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "plan": {
            "$ref": "#/components/schemas/SubscriptionPlan"
          },
          "commitment": {
            "$ref": "#/components/schemas/SubscriptionCommitment"
          },
          "amountInCents": {
            "type": "integer",
            "format": "int32"
          },
          "subscriptionValidFrom": {
            "type": "string",
            "format": "date-time"
          },
          "nextChargeDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdAtUtc": {
            "type": "string",
            "format": "date-time"
          },
          "licVeterinaries": {
            "type": "integer",
            "format": "int32"
          },
          "licAssistants": {
            "type": "integer",
            "format": "int32"
          },
          "licAccountants": {
            "type": "integer",
            "format": "int32"
          },
          "licExternalServices": {
            "type": "integer",
            "format": "int32"
          },
          "includedOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionOption"
            }
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          }
        }
      },
      "SubscriptionInvoiceDto": {
        "required": [
          "uid",
          "subscriptionUid",
          "amountInCents",
          "attemptedAtUtc",
          "status"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid"
          },
          "subscriptionUid": {
            "type": "string",
            "format": "uuid"
          },
          "paymentIntentId": {
            "type": "string",
            "nullable": true
          },
          "stripeStatus": {
            "type": "string",
            "nullable": true
          },
          "amountInCents": {
            "type": "integer",
            "format": "int32"
          },
          "attemptedAtUtc": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionInvoiceStatus"
          },
          "completedAtUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "SubscriptionInvoicesDto": {
        "required": [
          "subscriptionUid",
          "establishmentUid",
          "plan",
          "commitment",
          "currentAmountInCents",
          "subscriptionValidFrom",
          "nextChargeDate",
          "createdAtUtc",
          "licVeterinaries",
          "licAssistants",
          "licAccountants",
          "licExternalServices",
          "includedOptions",
          "status",
          "invoices"
        ],
        "type": "object",
        "properties": {
          "subscriptionUid": {
            "type": "string",
            "format": "uuid"
          },
          "establishmentUid": {
            "type": "string",
            "format": "uuid"
          },
          "previousSubscriptionUid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "plan": {
            "$ref": "#/components/schemas/SubscriptionPlan"
          },
          "commitment": {
            "$ref": "#/components/schemas/SubscriptionCommitment"
          },
          "currentAmountInCents": {
            "type": "integer",
            "format": "int32"
          },
          "subscriptionValidFrom": {
            "type": "string",
            "format": "date-time"
          },
          "nextChargeDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdAtUtc": {
            "type": "string",
            "format": "date-time"
          },
          "licVeterinaries": {
            "type": "integer",
            "format": "int32"
          },
          "licAssistants": {
            "type": "integer",
            "format": "int32"
          },
          "licAccountants": {
            "type": "integer",
            "format": "int32"
          },
          "licExternalServices": {
            "type": "integer",
            "format": "int32"
          },
          "includedOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionOption"
            }
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionInvoiceDto"
            }
          }
        }
      },
      "SubscriptionInvoiceStatus": {
        "enum": [
          "pending",
          "paid",
          "failed"
        ],
        "type": "string"
      },
      "SubscriptionOfferDto": {
        "required": [
          "plan",
          "monthlyPriceInCentimes",
          "percentageAnnualDiscount",
          "veterinariesLicences",
          "assistantsLicences",
          "accountantsLicences",
          "externalServicesLicences",
          "additionalVeterinariesLicencesPriceInCentimes",
          "additionalOtherLicencesPriceInCentimes",
          "includedOptions"
        ],
        "type": "object",
        "properties": {
          "plan": {
            "$ref": "#/components/schemas/SubscriptionPlan"
          },
          "monthlyPriceInCentimes": {
            "type": "integer",
            "format": "int32"
          },
          "percentageAnnualDiscount": {
            "type": "integer",
            "format": "int32"
          },
          "veterinariesLicences": {
            "type": "integer",
            "format": "int32"
          },
          "assistantsLicences": {
            "type": "integer",
            "format": "int32"
          },
          "accountantsLicences": {
            "type": "integer",
            "format": "int32"
          },
          "externalServicesLicences": {
            "type": "integer",
            "format": "int32"
          },
          "additionalVeterinariesLicencesPriceInCentimes": {
            "type": "integer",
            "format": "int32"
          },
          "additionalOtherLicencesPriceInCentimes": {
            "type": "integer",
            "format": "int32"
          },
          "includedOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionOption"
            }
          }
        }
      },
      "SubscriptionOption": {
        "enum": [
          "none",
          "planningPackage",
          "medicalPackage",
          "financePackage",
          "farmingPackage",
          "aiPackage",
          "statsPackage",
          "insightPackage"
        ],
        "type": "string"
      },
      "SubscriptionPlan": {
        "enum": [
          "discovery",
          "standard",
          "premium"
        ],
        "type": "string"
      },
      "SubscriptionStatus": {
        "enum": [
          "trial",
          "active",
          "pastDue",
          "cancelAtPeriodEnd",
          "cancelled"
        ],
        "type": "string"
      },
      "SubscriptionUpdateDto": {
        "required": [
          "plan",
          "commitment",
          "amount",
          "prorata"
        ],
        "type": "object",
        "properties": {
          "plan": {
            "$ref": "#/components/schemas/SubscriptionPlan"
          },
          "commitment": {
            "$ref": "#/components/schemas/SubscriptionCommitment"
          },
          "totalLicencesVet": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "totalLicencesAsv": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "totalLicencesAccountant": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "totalLicencesExternalSoftwares": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "prorata": {
            "type": "integer",
            "format": "int32"
          },
          "chosenOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionOption"
            }
          }
        }
      },
      "TermCdDtoJson": {
        "required": [
          "sourceCode",
          "sourceDesc"
        ],
        "type": "object",
        "properties": {
          "sourceCode": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sourceDesc": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TermDenrDtoJson": {
        "required": [
          "sourceCode",
          "sourceDesc"
        ],
        "type": "object",
        "properties": {
          "sourceCode": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sourceDesc": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TermEspDtoJson": {
        "required": [
          "sourceCode",
          "sourceDesc"
        ],
        "type": "object",
        "properties": {
          "sourceCode": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sourceDesc": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TermFpDtoJson": {
        "required": [
          "sourceCode",
          "sourceDesc"
        ],
        "type": "object",
        "properties": {
          "sourceCode": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sourceDesc": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TermNatDtoJson": {
        "required": [
          "sourceCode",
          "sourceDesc"
        ],
        "type": "object",
        "properties": {
          "sourceCode": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sourceDesc": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TermPresDtoJson": {
        "required": [
          "sourceCode",
          "sourceDesc"
        ],
        "type": "object",
        "properties": {
          "sourceCode": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sourceDesc": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TermSaDtoJson": {
        "required": [
          "sourceCode",
          "sourceDesc"
        ],
        "type": "object",
        "properties": {
          "sourceCode": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sourceDesc": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TermStatAutoDtoJson": {
        "required": [
          "sourceCode",
          "sourceDesc"
        ],
        "type": "object",
        "properties": {
          "sourceCode": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sourceDesc": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TermTitDtoJson": {
        "required": [
          "sourceCode",
          "sourceDesc"
        ],
        "type": "object",
        "properties": {
          "sourceCode": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sourceDesc": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TermTitreDtoJson": {
        "required": [
          "ordre",
          "sourceCode",
          "sourceDesc"
        ],
        "type": "object",
        "properties": {
          "ordre": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sourceCode": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sourceDesc": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TermTypProcDtoJson": {
        "required": [
          "sourceCode",
          "sourceDesc"
        ],
        "type": "object",
        "properties": {
          "sourceCode": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sourceDesc": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TermUniteDtoJson": {
        "required": [
          "sourceCode",
          "sourceDesc"
        ],
        "type": "object",
        "properties": {
          "sourceCode": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sourceDesc": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TermVaDtoJson": {
        "required": [
          "sourceCode",
          "sourceDesc"
        ],
        "type": "object",
        "properties": {
          "sourceCode": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sourceDesc": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TokenApiClientCredentialDto": {
        "required": [
          "access_token"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "minLength": 1,
            "type": "string"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32"
          },
          "refresh_expires_in": {
            "type": "integer",
            "format": "int32"
          },
          "token_type": {
            "type": "string",
            "nullable": true
          },
          "not-before-policy": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "session_state": {
            "type": "string",
            "nullable": true
          },
          "scope": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateUserColorDto": {
        "required": [
          "colorHexaDecimal"
        ],
        "type": "object",
        "properties": {
          "colorHexaDecimal": {
            "type": "string"
          }
        }
      },
      "UpdateUserInfoDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 80,
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "maxLength": 80,
            "type": "string",
            "nullable": true
          },
          "initials": {
            "maxLength": 12,
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateUserRoleDto": {
        "required": [
          "userUid",
          "targetRole"
        ],
        "type": "object",
        "properties": {
          "userUid": {
            "type": "string",
            "format": "uuid"
          },
          "targetRole": {
            "$ref": "#/components/schemas/VcsRole"
          }
        }
      },
      "UploadTransactionInfoDto": {
        "required": [
          "dateExpiration",
          "identifier"
        ],
        "type": "object",
        "properties": {
          "dateExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "identifier": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UserInfoDto": {
        "required": [
          "firstName",
          "lastName",
          "email",
          "initials",
          "color",
          "keycloakId"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "lastName": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "initials": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string"
          },
          "color": {
            "maxLength": 7,
            "minLength": 7,
            "type": "string"
          },
          "keycloakId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "VcsRole": {
        "enum": [
          "assistant",
          "veterinary",
          "accountant",
          "externalSoftware"
        ],
        "type": "string"
      },
      "VoieAdministrationDtoJson": {
        "required": [
          "termVa",
          "termEsp"
        ],
        "type": "object",
        "properties": {
          "termVa": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "termEsp": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "termDenr": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "qteTa": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "termUnite": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Account"
    },
    {
      "name": "AmmData"
    },
    {
      "name": "Animals"
    },
    {
      "name": "Appointment"
    },
    {
      "name": "Customers"
    },
    {
      "name": "Establishment"
    },
    {
      "name": "File"
    },
    {
      "name": "Invoice"
    },
    {
      "name": "Payment"
    },
    {
      "name": "Pricing"
    },
    {
      "name": "Server"
    },
    {
      "name": "SignalR"
    },
    {
      "name": "Subscription"
    }
  ]
}